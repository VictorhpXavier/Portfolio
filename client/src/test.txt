import React, { useRef, useState, useEffect } from 'react';
import { BrowserRouter as Router, Route, Routes, Link, useLocation, Navigate, useParams} from 'react-router-dom';
import Home from './components/Home'; // gets the html structure and sends it to here
import Projects from './components/projects';
import Blog from './components/Blog';
import BlogPost from './components/BlogPost';
import styles from './App.css';

function Header() {
    const location = useLocation();
    const pathname = location.pathname;

    // Get screen size
    const [width, setWidth] = useState(window.innerWidth);

    useEffect(() => {
        const handleResize = () => setWidth(window.innerWidth);
        window.addEventListener('resize', handleResize);

        return () => {
            window.removeEventListener('resize', handleResize);
        };
    }, []);

    const containerMenuRef = useRef(null);
    const mainRoutesRef = useRef(null);
    const searchRef = useRef(null);
    const headerRef = useRef(null);

    function enableMenu() {
        containerMenuRef.current.classList.toggle('change');
        if (width < 479) {
            if (mainRoutesRef.current.style.display !== 'block') {
                mainRoutesRef.current.style.display = 'block';
                searchRef.current.style.display = 'flex';
                headerRef.current.style.height = '290px';
            } else {
                mainRoutesRef.current.style.display = 'none';
                searchRef.current.style.display = 'none';
                headerRef.current.style.height = '60px';
            }
        } else if (width > 479) {
            if (mainRoutesRef.current.style.display !== 'block') {
                mainRoutesRef.current.style.display = 'block';
                searchRef.current.style.display = 'block';
            } else {
                mainRoutesRef.current.style.display = 'none';
                searchRef.current.style.display = 'none';
            }
        }
    }

    function CloseMenu() {
        if (width < 479) {
            containerMenuRef.current.classList.remove('change');
            mainRoutesRef.current.style.display = 'none';
            searchRef.current.style.display = 'none';
            headerRef.current.style.height = '60px';
        }
    }

    const inputRef = useRef(null);
  const searchMenuRef = useRef(null); 
  const [search, setSearch] = useState('');

  // Handle input change
  const handleInputChange = (event) => {
    setSearch(event.target.value);
  };

  // Search menu visibility based on search input length
  useEffect(() => {
    if (search.length > 0) {
      searchMenuRef.current?.classList.add('visible');
    } else {
      searchMenuRef.current?.classList.remove('visible');
    }
  }, [search]);

  // Manage input focus and class addition
  useEffect(() => {
    if (inputRef.current) {
      inputRef.current.classList.add('focused-input');
      inputRef.current.focus(); // Focus the input field
    } 
  }, []); // Empty dependency array to run this once when the component mounts

  // Handle clicks outside the input to clear and hide the search menu
  useEffect(() => {
    function handleClickOutside(event) {
      if (inputRef.current && !inputRef.current.contains(event.target)) {
        setSearch(''); // Clear the search input
        searchMenuRef.current?.classList.remove('visible'); // Hide the search menu
      }
    }

    document.addEventListener('mousedown', handleClickOutside);
    
    return () => {
      document.removeEventListener('mousedown', handleClickOutside); // Clean up event listener on unmount
    };
  }, []);

    const searchResults = {
      bot: {
        link: "/projects",
        img: "tile.jpg",
        title: "<h1>test title</h1>",
        span: "<span>test span</span>",

      }
    }
    const { slug } = useParams()
    const result = searchResults[slug]
    
    
    return (
        <div className="header" ref={headerRef}>
            <div className="container">
                <div className="Logo">
                    <Link to="/home">
                        <h1>
                            V<span>H</span>X
                        </h1>
                    </Link>
                </div>
                <div
                    className="containerMenu"
                    ref={containerMenuRef}
                    onClick={enableMenu}
                >
                    <div className="bar1"></div>
                    <div className="bar2"></div>
                    <div className="bar3"></div>
                </div>
                <div
                    className="MainRoutes"
                    ref={mainRoutesRef}
                    onClick={CloseMenu}
                >
                    <ul>
                        <li
                            className={
                                pathname === '/' || pathname === '/home'
                                    ? 'Home active'
                                    : 'Home'
                            }
                        >
                            <Link to="/home">Home</Link>
                        </li>
                        <li
                            className={pathname === '/Projects' ? 'active' : ''}
                        >
                            <Link to="/Projects">Projects</Link>
                        </li>
                        <li
                            className={
                                pathname === '/blog' ||
                                pathname.startsWith('/blog')
                                    ? 'active'
                                    : ''
                            }
                        >
                            <Link to="/blog">Blog</Link>
                        </li>
                    </ul>
                </div>
                <div className="Search" ref={searchMenuRef}>
                    <input
                        type="text"
                        placeholder="Search Projects"
                        ref={inputRef}
                        onChange={handleInputChange}
                        />
                    <Link to="#">
                        <img
                            src={`${process.env.PUBLIC_URL}/images/search.png`}
                            alt="Search"
                            ref={searchRef}/>
                    </Link>
                </div>
                <div className="SearchMenu" ref={searchMenuRef}>
                    <div className="ShowProjects">
                        <div className="TextContainer">

                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
}

function App() {
    return (
        <Router>
            <Header />
            <Routes>
                <Route path="/" element={<Navigate to="/home" />} />
                <Route path="*" element={<Navigate to="/home" />} />
                <Route path="/home" element={<Home />} />
                <Route path="/Projects" element={<Projects />} />
                <Route path="/blog" element={<Blog />} />
                <Route path="/blog/:slug" element={<BlogPost />} />
            </Routes>
        </Router>
    );
}

export default App;
